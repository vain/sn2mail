#!/bin/bash

rcfile=${SN2MAILRC:-~/.sn2mailrc}
[[ ! -r "$rcfile" ]] && { echo "No settings found.">&2; exit 1; }
. "$rcfile"

# Read a quote from a filename (may be /dev/stdin) or do a new posting?
if [[ -n $1 ]]
then
	mail=$(< "$1")

	in_reply_to=$(echo "$mail" | sed -rn 's/^Message-ID:.*-([[:digit:]]+)>$/\1/p')
	original_text=$(echo "$mail" | sed -n '/^$/,$p')

	target="$url/statuses/update.xml?in_reply_to_status_id=$in_reply_to"
else
	original_text="<new posting>"
	target="$url/statuses/update.xml"
fi

# Prepare a temporary file, hash it and launch the editor.
reply_text=$(mktemp)
trap 'rm -f "$reply_text"' EXIT

echo "| vim: set ft=mail : |" >>"$reply_text"
echo "$original_text" | fmt | sed 's/^/> /' >>"$reply_text"
echo >>"$reply_text"
reply_hash=$(md5sum "$reply_text")

(
	exec 0</dev/tty
	exec 1>/dev/tty
	exec 2>/dev/tty
	$EDITOR "$reply_text"
)
reply_hash_new=$(md5sum "$reply_text")

# Only send this notice if the file really has changed.
[[ "$reply_hash" == "$reply_hash_new" ]] && { echo "Aborted." >&2; exit; }

# Encode basic HTML entities...
actual_text=$(sed -n '/^$/,$p' "$reply_text" | sed 1d)
encoded_text=$(echo "$actual_text" | sed 's/&/\&amp;/g')
encoded_text=$(echo "$encoded_text" | sed 's/</&lt;/g')
encoded_text=$(echo "$encoded_text" | sed 's/>/&gt;/g')

response=$(curl -f -i --user "$user:$pass" -s -F "status=$encoded_text" "$target")
if (( $? != 0 ))
then
	echo "Posting failed." >&2
	echo >&2
	echo "$response" >&2
else
	sn2mail-get
fi
